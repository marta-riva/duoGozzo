function [svi_roots, crossedness] = calcSviRoots(svi_mod_1_, svi_mod_2_, ...
    mod_)
% This function returns an the roots and the crossedness
% In
%   svi_mod_1_ [struct]: SVI parametrization slice 1
%   svi_mod_2_ [struct]: SVI parametrization slice 2
%   mod_ [char]: Parametrization ('raw', 'surf', 'nat' or 'jw')
% Out
%   svi_roots [vector]: Roots
%   crossedness [float]: Crossedness

% FOR DEBUG PURPOSES
% raw_svi_mod_1_ = makeSviModelRaw(1.8,0.8,-0.5,0,10^-100,NaN);
% raw_svi_mod_2_ = makeSviModelRaw(1,1,-0.5,0,1,NaN);
% k = (-4:0.001:8)';
% TotIvar1 = calcSviTotIvarQs(raw_svi_mod_1_, k, 'raw');
% TotIvar2 = calcSviTotIvarQs(raw_svi_mod_2_, k, 'raw');
% % plot for inspection -----------------------------------------------------
% plot(k,[TotIvar1,TotIvar2])
% hold on
% xline(7.3201);
% xline(0.2588);
% xline(-0.3911);
% xline(-1.8050);
% % -------------------------------------------------------------------------

if (nargin < 3)
    mod_ = 'raw';
end
raw_svi_mod_1 = makeSviModelConversion(svi_mod_1_, mod_, 'raw');
raw_svi_mod_2 = makeSviModelConversion(svi_mod_2_, mod_, 'raw');
% define slice 1 parameters
a1 = raw_svi_mod_1.a;
b1 = raw_svi_mod_1.b;
r1 = raw_svi_mod_1.rho;
m1 = raw_svi_mod_1.m;
s1 = raw_svi_mod_1.sigma;
% define slice 2 parameters
a2 = raw_svi_mod_2.a;
b2 = raw_svi_mod_2.b;
r2 = raw_svi_mod_2.rho;
m2 = raw_svi_mod_2.m;
s2 = raw_svi_mod_2.sigma;
% The standard form is q4 x^4+q3 x^3 +q2 x^2 +q1 x+q0 == 0
q2 = 1000000*-2*(-3*b1^4*m1^2+b1^2*b2^2*m1^2+4*b1^2*b2^2*m1*m2+b1^2* ...
    b2^2*m2^2-3*b2^4*m2^2+6*b1^4*m1^2*r1^2+b1^2*b2^2*m1^2*r1^2+4*b1^2* ...
    b2^2*m1*m2*r1^2+b1^2*b2^2*m2^2*r1^2-3*b1^4*m1^2*r1^4-6*b1^3*b2* ...
    m1^2*r1*r2-6*b1^3*b2*m1*m2*r1*r2-6*b1*b2^3*m1*m2*r1*r2-6*b1*b2^3* ...
    m2^2*r1*r2+6*b1^3*b2*m1^2*r1^3*r2+6*b1^3*b2*m1*m2*r1^3*r2+b1^2*b2^2* ...
    m1^2*r2^2+4*b1^2*b2^2*m1*m2*r2^2+b1^2*b2^2*m2^2*r2^2+6*b2^4*m2^2* ...
    r2^2-3*b1^2*b2^2*m1^2*r1^2*r2^2-12*b1^2*b2^2*m1*m2*r1^2*r2^2-3*b1^2* ...
    b2^2*m2^2*r1^2*r2^2+6*b1*b2^3*m1*m2*r1*r2^3+6*b1*b2^3*m2^2*r1*r2^3- ...
    3*b2^4*m2^2*r2^4-a1^2*(b1^2*(-1+3*r1^2)-6*b1*b2*r1*r2+b2^2*(-1+3* ...
    r2^2))-a2^2*(b1^2*(-1+3*r1^2)-6*b1*b2*r1*r2+b2^2*(-1+3*r2^2))-2*a2* ...
    (3*b1^3*m1*r1*(-1+r1^2)-b1^2*b2*(2*m1+m2)*(-1+3*r1^2)*r2-3*b2^3*m2* ...
    r2*(-1+r2^2)+b1*b2^2*(m1+2*m2)*r1*(-1+3*r2^2))+2*a1*(3*b1^3*m1*r1* ...
    (-1+r1^2)-b1^2*b2*(2*m1+m2)*(-1+3*r1^2)*r2-3*b2^3*m2*r2*(-1+r2^2)+ ...
    b1*b2^2*(m1+2*m2)*r1*(-1+3*r2^2)+a2*(b1^2*(-1+3*r1^2)-6*b1*b2*r1* ...
    r2+b2^2*(-1+3*r2^2)))-b1^4*s1^2+b1^2*b2^2*s1^2+b1^4*r1^2*s1^2-2* ...
    b1^3*b2*r1*r2*s1^2+b1^2*b2^2*r2^2*s1^2+b1^2*b2^2*s2^2-b2^4*s2^2+ ...
    b1^2*b2^2*r1^2*s2^2-2*b1*b2^3*r1*r2*s2^2+b2^4*r2^2*s2^2);
q4 = 1000000*(b1^4*(-1+r1^2)^2-4*b1^3*b2*r1*(-1+r1^2)*r2-4*b1*b2^3*r1* ...
    r2*(-1+r2^2)+b2^4*(-1+r2^2)^2+2*b1^2*b2^2*(-1-r2^2+r1^2*(-1+3*r2^2)));
q0 = 1000000*(a1^4+a2^4+b1^4*m1^4-2*b1^2*b2^2*m1^2*m2^2+b2^4*m2^4-2* ...
    b1^4*m1^4*r1^2-2*b1^2*b2^2*m1^2*m2^2*r1^2+b1^4*m1^4*r1^4+4*b1^3*b2* ...
    m1^3*m2*r1*r2+4*b1*b2^3*m1*m2^3*r1*r2-4*b1^3*b2*m1^3*m2*r1^3*r2-2* ...
    b1^2*b2^2*m1^2*m2^2*r2^2-2*b2^4*m2^4*r2^2+6*b1^2*b2^2*m1^2*m2^2* ...
    r1^2*r2^2-4*b1*b2^3*m1*m2^3*r1*r2^3+b2^4*m2^4*r2^4+4*a2^3*(b1*m1* ...
    r1-b2*m2*r2)-4*a1^3*(a2+b1*m1*r1-b2*m2*r2)+2*b1^4*m1^2*s1^2-2* ...
    b1^2*b2^2*m2^2*s1^2-2*b1^4*m1^2*r1^2*s1^2+4*b1^3*b2*m1*m2*r1*r2* ...
    s1^2-2*b1^2*b2^2*m2^2*r2^2*s1^2+b1^4*s1^4-2*b1^2*b2^2*m1^2*s2^2+ ...
    2*b2^4*m2^2*s2^2-2*b1^2*b2^2*m1^2*r1^2*s2^2+4*b1*b2^3*m1*m2*r1*r2* ...
    s2^2-2*b2^4*m2^2*r2^2*s2^2-2*b1^2*b2^2*s1^2*s2^2+b2^4*s2^4+4*a2* ...
    (b1*m1*r1-b2*m2*r2)*(-2*b1*b2*m1*m2*r1*r2+b1^2*(m1^2*(-1+r1^2)- ...
    s1^2)+b2^2*(m2^2*(-1+r2^2)-s2^2))-4*a1*(a2+b1*m1*r1-b2*m2*r2)* ...
    (a2^2-2*b1*b2*m1*m2*r1*r2+2*a2*(b1*m1*r1-b2*m2*r2)+b1^2*(m1^2* ...
    (-1+r1^2)-s1^2)+b2^2*(m2^2*(-1+r2^2)-s2^2))+2*a2^2*(-6*b1*b2*m1*m2* ...
    r1*r2+b1^2*(m1^2*(-1+3*r1^2)-s1^2)+b2^2*(m2^2*(-1+3*r2^2)-s2^2))+ ...
    2*a1^2*(3*a2^2-6*b1*b2*m1*m2*r1*r2+6*a2*(b1*m1*r1-b2*m2*r2)+b1^2*...
    (m1^2*(-1+3*r1^2)-s1^2)+b2^2*(m2^2*(-1+3*r2^2)-s2^2)));
q3 = 1000000*-4*(b1^4*m1*(-1+r1^2)^2-b1^3*r1*(-1+r1^2)*(a1-a2+b2*(3*m1+ ...
    m2)*r2)+b2^3*(-1+r2^2)*((a1-a2)*r2+b2*m2*(-1+r2^2))+b1*b2^2*r1*(a1- ...
    3*a1*r2^2-b2*(m1+3*m2)*r2*(-1+r2^2)+a2*(-1+3*r2^2))+b1^2*b2*((a1- ...
    a2)*(-1+3*r1^2)*r2+b2*(m1+m2)*(-1-r2^2+r1^2*(-1+3*r2^2))));
q1 = 1000000*4*(-(b1^4*m1^3)+b1^2*b2^2*m1^2*m2+b1^2*b2^2*m1*m2^2-b2^4* ...
    m2^3+2*b1^4*m1^3*r1^2+b1^2*b2^2*m1^2*m2*r1^2+b1^2*b2^2*m1*m2^2*r1^2- ...
    b1^4*m1^3*r1^4-b1^3*b2*m1^3*r1*r2-3*b1^3*b2*m1^2*m2*r1*r2-3*b1*b2^3* ...
    m1*m2^2*r1*r2-b1*b2^3*m2^3*r1*r2+b1^3*b2*m1^3*r1^3*r2+3*b1^3*b2* ...
    m1^2*m2*r1^3*r2+b1^2*b2^2*m1^2*m2*r2^2+b1^2*b2^2*m1*m2^2*r2^2+2* ...
    b2^4*m2^3*r2^2-3*b1^2*b2^2*m1^2*m2*r1^2*r2^2-3*b1^2*b2^2*m1*m2^2* ...
    r1^2*r2^2+3*b1*b2^3*m1*m2^2*r1*r2^3+b1*b2^3*m2^3*r1*r2^3-b2^4*m2^3* ...
    r2^4+a1^3*(b1*r1-b2*r2)+a2^3*(-(b1*r1)+b2*r2)+a2^2*(b1^2*(m1-3*m1* ...
    r1^2)+3*b1*b2*(m1+m2)*r1*r2+b2^2*m2*(1-3*r2^2))+a1^2*(b1^2*(m1-3*m1* ...
    r1^2)+3*b1*r1*(-a2+b2*(m1+m2)*r2)+b2*(3*a2*r2+b2*(m2-3*m2*r2^2)))- ...
    b1^4*m1*s1^2+b1^2*b2^2*m2*s1^2+b1^4*m1*r1^2*s1^2-b1^3*b2*m1*r1*r2* ...
    s1^2-b1^3*b2*m2*r1*r2*s1^2+b1^2*b2^2*m2*r2^2*s1^2+b1^2*b2^2*m1*s2^2- ...
    b2^4*m2*s2^2+b1^2*b2^2*m1*r1^2*s2^2-b1*b2^3*m1*r1*r2*s2^2-b1*b2^3* ...
    m2*r1*r2*s2^2+b2^4*m2*r2^2*s2^2+a2*(b1^2*b2*r2*(m1^2*(-1+3*r1^2)+ ...
    2*m1*m2*(-1+3*r1^2)-s1^2)+b1^3*r1*(-3*m1^2*(-1+r1^2)+s1^2)+b2^3*r2* ...
    (3*m2^2*(-1+r2^2)-s2^2)+b1*b2^2*r1*(m1*m2*(2-6*r2^2)+m2^2*(1-3* ...
    r2^2)+s2^2))+a1*(3*a2^2*(b1*r1-b2*r2)+a2*(2*b1^2*m1*(-1+3*r1^2)-6* ...
    b1*b2*(m1+m2)*r1*r2+2*b2^2*m2*(-1+3*r2^2))+b1^3*r1*(3*m1^2*(-1+ ...
    r1^2)-s1^2)+b1^2*b2*r2*(m1*m2*(2-6*r1^2)+m1^2*(1-3*r1^2)+s1^2)+b1* ...
    b2^2*r1*(2*m1*m2*(-1+3*r2^2)+m2^2*(-1+3*r2^2)-s2^2)+b2^3*r2*(-3* ...
    m2^2*(-1+r2^2)+s2^2)));
term0 = (2*q2^3+27*q3^2*q0-72*q4*q2*q0-9*q3*q2*q1+27*q4*q1^2);
term1 = (q2^2/4+3*q4*q0-3*q3*q1/4);
term2 = -256*term1^3+term0^2;
term3 = sqrt(term2+0*1i);
term4 = (term0+term3)^(1/3);
term5 = 3*q4*term4;
term6 = (4*2^(1/3)*term1);
term7 = (3*2^(1/3)*q4);
term8 = q3^2/(4*q4^2)-(2*q2)/(3*q4);
term9 = term6/term5+term4/term7;
%
rr = sqrt(term8+term9);
ee = q3^2/(2*q4^2)-(4*q2)/(3*q4)-(4*2^(1/3)*term1)/term5-term4/(3* ...
    2^(1/3)*q4) -(-q3^3/4+q4*q3*q2-2*q4^2*q1)/(q4^3*rr);
dd = q3^2/(2*q4^2)-(4*q2)/(3*q4)-(4*2^(1/3)*term1)/term5-term4/(3* ...
    2^(1/3)*q4)+(-q3^3/4+q4*q3*q2-2*q4^2*q1)/(q4^3*rr);
% Potential roots are given by
svi_roots = [-q3/(4*q4)+rr/2+sqrt(dd)/2;
    -q3/(4*q4)+rr/2-sqrt(dd)/2;
    -q3/(4*q4)-rr/2+sqrt(ee)/2;
    -q3/(4*q4)-rr/2-sqrt(ee)/2];
% Need to check these are really roots
kr = (svi_roots.*(abs(imag(svi_roots)) < 10^(-10)));
test = @(k) (a1+b1.*(r1.*(k-m1)+sqrt((k-m1).^2+s1.^2)))-(a2+b2.*(r2.* ...
    (k-m2)+sqrt((k-m2).^2+s2.^2)));
% Which potential root is actually a root?
num = (abs(test(kr)) < 10^(-10));
% Roots in ascending order
svi_roots = real(sort(real(kr(num))));
nRoots = length(svi_roots);
%
if (nRoots > 1)
    midPoints = (svi_roots(1:(nRoots-1))+svi_roots(2:nRoots))/2;
else
    midPoints = [];
end
if (nRoots>0)
    % Choose some sensible sampling points
    samplePoints = [svi_roots(1)-1;midPoints;svi_roots(nRoots)+1];
	sviShort = calcSviTotIvarQs(raw_svi_mod_1, samplePoints, 'raw');
	sviLong = calcSviTotIvarQs(raw_svi_mod_2, samplePoints, 'raw');
    % Maximal amount of crossing bounded below by zero
	crossedness = max(0,max(sviShort-sviLong));
else
    crossedness = 0;
end

end
